JAVA注解：https://blog.csdn.net/briblue/article/details/73824058
    注解可以理解为是对代码的一种解释

    写法：通过@interface来定义注解，比如：

        public @interface Annotation{....}

        这就定义了一个名字为Annotation的注解

    使用：在使用的上面标注

        @Annotation
        public class Test{....}

    那么是怎么工作的呢？


元注解：
    元注解有5种：@Retention 、@Documented 、@Target 、@Inherited 、@Repeatable
    元注解是使用到定义的注解上的，比如：

    @Retention:

        @Retention
        public @interface Annotation{....}

        @Retention：有三个取值来指定注解的生命周期：
            RetentionPolicy.SOURCE：保存在源码中，进行编译的时候丢弃
            RetentionPolicy.CLASS：保留到编译进行，但是不会被加载到JVM
            RetentionPolicy.RUNTIME：加载到JVM，程序运行时可获取

        比如：
        @Retention(RetentionPolicy.RUNTIME)
        public @interface Annotation{....}

    @Documented

        将注解中的元素包含到Javadoc中去

    @Target

        指定注解运用的地方，就是你定义的这个注解可以用到哪个地方

            ElementType.ANNOTATION_TYPE 可以给一个注解进行注解
            ElementType.CONSTRUCTOR 可以给构造方法进行注解
            ElementType.FIELD 可以给属性进行注解
            ElementType.LOCAL_VARIABLE 可以给局部变量进行注解
            ElementType.METHOD 可以给方法进行注解
            ElementType.PACKAGE 可以给一个包进行注解
            ElementType.PARAMETER 可以给一个方法内的参数进行注解
            ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举

    @Inherited：

        继承，遗传，也就是说一个注解A被@Inherited修饰后，假设类Class被A修饰了，那么Class的子类也相当于被A修饰了

    @Repeatable：

        可重复，注解的值可以有多个？？？例子：

        @interface Persons{
            Person[] value
        }

        @Repeatable(Persons.class)      //这里注解Person类，括号内是注解类的容器
        @interface Person{
            String role default "";
        }

        @Person(role="artist")
        @Person(role="PM")
        public class SuperMan{...}







